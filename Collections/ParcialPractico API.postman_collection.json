{
	"info": {
		"_postman_id": "4a9f8495-2368-413a-8a15-73cdfc49c0ab",
		"name": "ParcialPractico API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25507796"
	},
	"item": [
		{
			"name": "Biblioteca",
			"item": [
				{
					"name": "Create Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"libraryId\", data.id);",
									"",
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const lib = pm.response.json();",
									"pm.test(\"Response has id\", () => pm.expect(lib).to.have.property(\"id\"));",
									"pm.test(\"Nombre matches\", () => pm.expect(lib.nombre).to.eql(\"Central Library\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Central Library\",\n  \"direccion\": \"123 Main St\",\n  \"ciudad\": \"Bogot치\",\n  \"horaApertura\": \"08:00:00\",\n  \"horaCierre\": \"18:00:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Library Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"La hora de apertura debe ser menor a la de cierre\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Central Library\",\n  \"direccion\": \"123 Main St\",\n  \"ciudad\": \"Bogot치\",\n  \"horaApertura\": \"18:00:00\",\n  \"horaCierre\": \"08:00:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const arr = pm.response.json();",
									"pm.test(\"Response is array\", () => pm.expect(arr).to.be.an(\"array\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Library By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const lib = pm.response.json();",
									"pm.test(\"ID matches\", () => pm.expect(lib.id).to.eql(pm.environment.get(\"libraryId\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Library By ID Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"La biblioteca con el id dado no fue encontrada\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const lib = pm.response.json();",
									"pm.test(\"Nombre updated\", () => pm.expect(lib.nombre).to.eql(\"Central Library Updated\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Central Library Updated\",\n  \"direccion\": \"123 Main St\",\n  \"ciudad\": \"Bogot치\",\n  \"horaApertura\": \"09:00:00\",\n  \"horaCierre\": \"19:00:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Library Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"La biblioteca con el id dado no fue encontrada\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nombre\": \"Central Library Updated\",\n  \"direccion\": \"123 Main St\",\n  \"ciudad\": \"Bogot치\",\n  \"horaApertura\": \"09:00:00\",\n  \"horaCierre\": \"19:00:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: `${pm.environment.get(\"base_url\")}/libraries`,",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      nombre: \"Temp Library To Delete\",",
									"      direccion: \"123 Delete St\",",
									"      ciudad: \"Quito\",",
									"      horaApertura: \"08:00:00\",",
									"      horaCierre: \"17:00:00\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  const lib = res.json();",
									"  pm.environment.set(\"libraryToDeleteId\", lib.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryToDeleteId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryToDeleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Library Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"La biblioteca con el id dado no fue encontrada\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Libro",
			"item": [
				{
					"name": "Create Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();",
									"pm.environment.set(\"bookId\", data.id);",
									"",
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const book = pm.response.json();",
									"pm.test(\"Has id\", () => pm.expect(book).to.have.property(\"id\"));",
									"pm.test(\"Titulo matches\", () => pm.expect(book.titulo).to.eql(\"Clean Code\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Clean Code\",\n  \"autor\": \"Robert C. Martin\",\n  \"fechaPublicacion\": \"2008-08-01\",\n  \"isbn\": \"9780132350884\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Book Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", () => pm.response.to.have.status(400));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"titulo should not be empty\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"\",\n  \"autor\": \"Some Author\",\n  \"fechaPublicacion\": \"2030-01-01\",\n  \"isbn\": \"9780132350884\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const arr = pm.response.json();",
									"pm.test(\"Response is array\", () => pm.expect(arr).to.be.an(\"array\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const book = pm.response.json();",
									"pm.test(\"ID matches\", () => pm.expect(book.id).to.eql(pm.environment.get(\"bookId\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con el id dado no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const book = pm.response.json();",
									"pm.test(\"Titulo updated\", () => pm.expect(book.titulo).to.eql(\"Clean Code (2nd Edition)\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Clean Code (2nd Edition)\",\n  \"autor\": \"Robert C. Martin\",\n  \"fechaPublicacion\": \"2008-08-01\",\n  \"isbn\": \"9780132350884\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Book Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con el id dado no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titulo\": \"Clean Code (2nd Edition)\",\n  \"autor\": \"Robert C. Martin\",\n  \"fechaPublicacion\": \"2008-08-01\",\n  \"isbn\": \"9780132350884\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: `${pm.environment.get(\"base_url\")}/books`,",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      titulo: \"Temp Book To Delete\",",
									"      autor: \"Test Writer\",",
									"      fechaPublicacion: \"2022-01-01\",",
									"      isbn: \"TEMP-DEL-ISBN\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  const book = res.json();",
									"  pm.environment.set(\"bookToDeleteId\", book.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{bookToDeleteId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookToDeleteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con el id dado no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Biblioteca-Libro",
			"item": [
				{
					"name": "Associate Book To Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const lib = pm.response.json();",
									"pm.test(\"Library now has book\", () =>",
									"  pm.expect(lib.libros.find(book => book.id===pm.environment.get(\"bookId\"))).to.exist",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Non-Existent Book to Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con el id dado no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const arr = pm.response.json();",
									"pm.test(\"Is array\", () => pm.expect(arr).to.be.an(\"array\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const book = pm.response.json();",
									"pm.test(\"ID matches\", () => pm.expect(book.id).to.eql(pm.environment.get(\"bookId\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID Not Associated In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 412\", () => pm.response.to.have.status(412));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro no est치 asociado a la biblioteca\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: pm.environment.get(\"base_url\") + \"/books\",",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      titulo: \"Temp Unlinked\",",
									"      autor: \"PreReq Author\",",
									"      fechaPublicacion: \"2021-01-01\",",
									"      isbn: \"TEMP-UNLNK\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  pm.environment.set(\"unlinkedBookId\", res.json().id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{unlinkedBookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{unlinkedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Books In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const lib = pm.response.json();",
									"pm.test(\"Only that book remains\", () => pm.expect(lib.libros).to.have.lengthOf(1));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"{{bookId}}\",\n    \"titulo\": \"Clean Code\",\n    \"autor\": \"Robert C. Martin\",\n    \"fechaPublicacion\": \"2008-08-01\",\n    \"isbn\": \"9780132350884\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update With Non-Existent Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(pm.request.body.raw);",
									"",
									"let bookid = jsonData[0].id;",
									"",
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con id \" + bookid + \" no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{invalidId}}\",\n        \"titulo\": \"X\",\n        \"autor\": \"Y\",\n        \"fechaPublicacion\": \"2000-01-01\",\n        \"isbn\": \"123\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Associated Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book Not Associated In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 412\", () => pm.response.to.have.status(412));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro no est치 asociado a la biblioteca\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: pm.environment.get(\"base_url\") + \"/books\",",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      titulo: \"Temp Unlinked\",",
									"      autor: \"PreReq Author\",",
									"      fechaPublicacion: \"2021-01-01\",",
									"      isbn: \"TEMP-UNLNK\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  pm.environment.set(\"unlinkedBookId\", res.json().id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{unlinkedBookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{unlinkedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Book To Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", () => pm.response.to.have.status(201));",
									"const lib = pm.response.json();",
									"pm.test(\"Library now has book\", () =>",
									"  pm.expect(lib.libros.find(book => book.id===pm.environment.get(\"bookId\"))).to.exist",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Associate Non-Existent Book to Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con el id dado no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{invalidId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const arr = pm.response.json();",
									"pm.test(\"Is array\", () => pm.expect(arr).to.be.an(\"array\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const book = pm.response.json();",
									"pm.test(\"ID matches\", () => pm.expect(book.id).to.eql(pm.environment.get(\"bookId\")));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Book By ID Not Associated In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 412\", () => pm.response.to.have.status(412));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro no est치 asociado a la biblioteca\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: pm.environment.get(\"base_url\") + \"/books\",",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      titulo: \"Temp Unlinked\",",
									"      autor: \"PreReq Author\",",
									"      fechaPublicacion: \"2021-01-01\",",
									"      isbn: \"TEMP-UNLNK\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  pm.environment.set(\"unlinkedBookId\", res.json().id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{unlinkedBookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{unlinkedBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Books In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const lib = pm.response.json();",
									"pm.test(\"Only that book remains\", () => pm.expect(lib.libros).to.have.lengthOf(1));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"{{bookId}}\",\n    \"titulo\": \"Clean Code\",\n    \"autor\": \"Robert C. Martin\",\n    \"fechaPublicacion\": \"2008-08-01\",\n    \"isbn\": \"9780132350884\"\n  }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update With Non-Existent Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(pm.request.body.raw);",
									"",
									"let bookid = jsonData[0].id;",
									"",
									"pm.test(\"Status is 404\", () => pm.response.to.have.status(404));",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro con id \" + bookid + \" no fue encontrado\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{invalidId}}\",\n        \"titulo\": \"X\",\n        \"autor\": \"Y\",\n        \"fechaPublicacion\": \"2000-01-01\",\n        \"isbn\": \"123\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Associated Book In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 204\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book Not Associated In Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 412\", () => pm.response.to.have.status(412));",
									"",
									"const err = pm.response.json();",
									"pm.test(\"Error contains validation message\", () =>",
									"  pm.expect(err.message).to.include(\"El libro no est치 asociado a la biblioteca\")",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"  url: pm.environment.get(\"base_url\") + \"/books\",",
									"  method: \"POST\",",
									"  header: { \"Content-Type\": \"application/json\" },",
									"  body: {",
									"    mode: \"raw\",",
									"    raw: JSON.stringify({",
									"      titulo: \"Temp Unlinked\",",
									"      autor: \"PreReq Author\",",
									"      fechaPublicacion: \"2021-01-01\",",
									"      isbn: \"TEMP-UNLNK\"",
									"    })",
									"  }",
									"}, (err, res) => {",
									"  pm.environment.set(\"unlinkedBookId\", res.json().id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/libraries/{{libraryId}}/books/{{unlinkedBookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"libraries",
								"{{libraryId}}",
								"books",
								"{{unlinkedBookId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}